////#define TESTONEDITOR_ME //comment on device build
//using System.Collections;
//using System.Collections.Generic;
//using UnityEngine;
//using UnityEngine.XR.iOS;

//public class ARKitSquareManager : MonoBehaviour
//{

//    public enum FocusState
//    {
//        Initializing,
//        Finding,
//        Found
//    }

//    private bool _isTracking = false;
//    public InputController InputCtrl;
//    public GameObject Plane;
//    //public GameObject Car;
//    public GameObject ARMenu;
//    public GameObject NormalMenu;
//    public GameObject ReflectMenu;
//    public GameObject findingSquare;
//    public GameObject foundSquare;

//    //for editor version
//    public float maxRayDistance = 30.0f;
//    public LayerMask collisionLayerMask;
//    public float findingSquareDist = 0.5f;

//    private FocusState squareState;
//    public FocusState SquareState
//    {
//        get
//        {
//            return squareState;
//        }
//        set
//        {
//            squareState = value;
//            foundSquare.SetActive(squareState == FocusState.Found);
//            findingSquare.SetActive(squareState != FocusState.Found);
//        }
//    }

//    bool trackingInitialized;

//    //MainGuiManager _guiManager = null;

//    // Use this for initialization
//    void Start()
//    {
//        SquareState = FocusState.Initializing;
//        trackingInitialized = true;
//        InputCtrl.SetActiveVehicle();
//        InputController.ActiveVehicle.SetActive(false);
//        Plane.SetActive(false);
//        ARMenu.SetActive(true);
//        NormalMenu.SetActive(false);
//        ReflectMenu.SetActive(false);
//        //_guiManager = FindObjectOfType<MainGuiManager>();
//        //Debug.Log("GuiManager" + _guiManager);
//    }


//    bool HitTestWithResultType(ARPoint point, ARHitTestResultType resultTypes)
//    {
//        List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface().HitTest(point, resultTypes);
//        if (hitResults.Count > 0)
//        {
//            foreach (var hitResult in hitResults)
//            {
//                foundSquare.transform.position = UnityARMatrixOps.GetPosition(hitResult.worldTransform);
//                foundSquare.transform.rotation = UnityARMatrixOps.GetRotation(hitResult.worldTransform);
//                //Debug.Log(string.Format("x:{0:0.######} y:{1:0.######} z:{2:0.######}", foundSquare.transform.position.x, foundSquare.transform.position.y, foundSquare.transform.position.z));


//                return true;
//            }
//        }
//        return false;
//    }

//    // Update is called once per frame
//    void Update()
//    {
//        if (_isTracking)
//            return; //!!!!!!!!!

//        //use center of screen for focusing
//        Vector3 center = new Vector3(Screen.width / 2, Screen.height / 2, findingSquareDist);

//        #if UNITY_EDITOR && TESTONEDITOR_ME
//        Ray ray = Camera.main.ScreenPointToRay (center);
//        RaycastHit hit;

//        //we'll try to hit one of the plane collider gameobjects that were generated by the plugin
//        //effectively similar to calling HitTest with ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent
//        if (Physics.Raycast (ray, out hit, maxRayDistance, collisionLayerMask)) {
//            //we're going to get the position from the contact point
//            //foundSquare.transform.position = hit.point;
//            //Debug.Log (string.Format ("x:{0:0.######} y:{1:0.######} z:{2:0.######}", foundSquare.transform.position.x, foundSquare.transform.position.y, foundSquare.transform.position.z));

//            ////and the rotation from the transform of the plane collider
//            //SquareState = FocusState.Found;
//            //foundSquare.transform.rotation = hit.transform.rotation;
//            //return;

//            Debug.Log("Tracking started position: " + foundSquare.transform.position);
//            //_guiManager.ArScene.transform.position = foundSquare.transform.position;
//            //_guiManager.PlayerTank.transform.position = foundSquare.transform.position;
//            //_guiManager.EnemyPathContainer.transform.position = foundSquare.transform.position;
//            //_guiManager.TrackerFound();
//            CamTransformer.ScaledObjectOrigin = foundSquare.transform.position;
//            Plane.transform.position = foundSquare.transform.position;
//            Plane.SetActive(true);
//            Car.transform.position = foundSquare.transform.position;
//            Car.SetActive(true);
//            ARMenu.SetActive(false);
//            NormalMenu.SetActive(true);

//            _isTracking = true;

//            findingSquare.SetActive(false);
//            foundSquare.SetActive(false);
//        }


//        #else
//        var screenPosition = Camera.main.ScreenToViewportPoint(center);
//        ARPoint point = new ARPoint
//        {
//            x = screenPosition.x,
//            y = screenPosition.y
//        };

//        // prioritize reults types
//        ARHitTestResultType[] resultTypes = {
//        ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent, 
//        // if you want to use infinite planes use this:
//        ARHitTestResultType.ARHitTestResultTypeExistingPlane,
//        ARHitTestResultType.ARHitTestResultTypeHorizontalPlane, 
//        //ARHitTestResultType.ARHitTestResultTypeFeaturePoint
//        };

//        foreach (ARHitTestResultType resultType in resultTypes)
//        {
//            if (HitTestWithResultType(point, resultType))
//            {
//                SquareState = FocusState.Found;
//                if (Input.touchCount > 0)
//                {
//                    var touch = Input.GetTouch(0);
//                    if (touch.phase == TouchPhase.Began || touch.phase == TouchPhase.Moved)
//                    {
//                        Debug.Log("Tracking started position: " + foundSquare.transform.position);
//                        //_guiManager.ArScene.transform.position = foundSquare.transform.position;
//                        //_guiManager.PlayerTank.transform.position = foundSquare.transform.position;
//                        //_guiManager.EnemyPathContainer.transform.position = foundSquare.transform.position;
//                        //_guiManager.TrackerFound();
//                        CamTransformer.ScaledObjectOrigin = foundSquare.transform.position;
//                        Plane.transform.position = foundSquare.transform.position;
//                        Plane.SetActive(true);
//                        InputController.ActiveVehicle.transform.position = foundSquare.transform.position+new Vector3(0,0.2f,0);//a little high :)
//                        InputController.ActiveVehicle.SetActive(true);
//                        ARMenu.SetActive(false);
//                        NormalMenu.SetActive(true);

//                        _isTracking = true;

//                        findingSquare.SetActive(false);
//                        foundSquare.SetActive(false);
//                    }
//                }
//                return;
//            }
//        }

//        #endif

//        //if you got here, we have not found a plane, so if camera is facing below horizon, display the focus "finding" square
//        if (trackingInitialized)
//        {
//            SquareState = FocusState.Finding;

//            //check camera forward is facing downward
//            if (Vector3.Dot(Camera.main.transform.forward, Vector3.down) > 0)
//            {

//                //position the focus finding square a distance from camera and facing up
//                findingSquare.transform.position = Camera.main.ScreenToWorldPoint(center);

//                //vector from camera to focussquare
//                Vector3 vecToCamera = findingSquare.transform.position - Camera.main.transform.position;

//                //find vector that is orthogonal to camera vector and up vector
//                Vector3 vecOrthogonal = Vector3.Cross(vecToCamera, Vector3.up);

//                //find vector orthogonal to both above and up vector to find the forward vector in basis function
//                Vector3 vecForward = Vector3.Cross(vecOrthogonal, Vector3.up);


//                findingSquare.transform.rotation = Quaternion.LookRotation(vecForward, Vector3.up);

//            }
//            else
//            {
//                //we will not display finding square if camera is not facing below horizon
//                findingSquare.SetActive(false);
//            }


//        }

//    }

//    public void ShowReflectMenu()
//    {
//        NormalMenu.SetActive(false);
//        ReflectMenu.SetActive(true);
//    }

//    public void ShowNormalMenu()
//    {
//        NormalMenu.SetActive(true);
//        ReflectMenu.SetActive(false);
//    }


//}
